import speech_recognition as sr
import time

# --- LE MOD√àLE D'IA (la liste des sorts) ---
# Dictionnaire des sorts avec le nombre de mots attendus
SORTS_CONNUS = {
    "expelliarmus": 1,
    "lumos": 1,
    "nox": 1,
    "alohomora": 1,
    "wingardium leviosa": 2,
    "petrificus totalus": 2,
    "stupefix": 2,
    "expecto patronum": 3,

}

# Liste des sorts n√©cessitant une correspondance exacte pour √©viter les fausses d√©tections.
SORTS_MOTS_STRICTS = ["lumos", "nox", "alohomora", "stupefy", "accio"]

# Liste des variations phon√©tiques tol√©r√©es (pour les sorts fictifs mal transcrits par Google)
VARIATIONS_TOLEREES = {
    "accio": ["axio", "akio"], 
    "nox": ["nocks", "knox"],
    "stupefy": ["stupify"],
    "alohomora": ["allohomora", "aloha mora"],
}

def ecouter_et_reconnaitre_sort():
    """
    √âcoute l'audio du microphone, le convertit en texte et v√©rifie si c'est un sort connu.
    """
    r = sr.Recognizer()
    
    r.pause_threshold = 0.8  # Temps d'attente apr√®s la fin de la parole
    r.non_speaking_duration = 0.5 # Dur√©e minimale de silence √† ignorer

    with sr.Microphone() as source:
        print("ü™Ñ Pr√©paration... Ajustement du microphone pour le bruit ambiant.")
        
        # --- Fonction cl√© pour filtrer le bruit ambiant ---
        r.adjust_for_ambient_noise(source, duration=1) 
        
        print("üîä Dites un sort ! (Prononciation Anglaise/Latine recommand√©e)")
        
        try:
            audio = r.listen(source)
        except sr.WaitTimeoutError:
            print("üö´ Pas de parole d√©tect√©e.")
            return

    # --- √âtape 1 : Collecte des mots reconnus (Priorit√© EN, puis FR) ---
    tentatives_reconnues = set()
    
    # Priorit√© au mod√®le ANGLAIS (en-US) pour les mots fictifs (plus fiable pour la phon√©tique).
    for lang in ["en-US", "fr-FR"]: 
        try:
            # show_all=True nous donne toutes les hypoth√®ses de Google
            resultat = r.recognize_google(audio, language=lang, show_all=True)
            if resultat and 'alternative' in resultat:
                for alternative in resultat['alternative']:
                    texte_alternative = alternative['transcript'].lower()
                    
                    # On ajoute tous les mots de l'alternative √† notre ensemble de tentatives
                    tentatives_reconnues.update(set(texte_alternative.split()))
                    
        except sr.UnknownValueError:
            continue # L'audio n'a pas √©t√© compris dans cette langue
        except sr.RequestError as e:
            print(f"üåê ERREUR ({lang}): Impossible de se connecter au service Google Speech Recognition; {e}")
            
    if not tentatives_reconnues:
        print("ü§∑ La reconnaissance vocale n'a rien compris.")
        return

    print(f"üëÇ Mots uniques d√©tect√©s : {tentatives_reconnues}")

    # --- √âtape 2 : V√©rification des sorts (avec tol√©rance phon√©tique) ---
    
    for sort_canonique, nb_mots_attendus in SORTS_CONNUS.items():
        
        # 2.1. V√©rification par correspondance EXACTE et Variantes (pour les sorts courts)
        # On v√©rifie si le mot exact OU ses variations phon√©tiques sont pr√©sentes.
        mots_a_verifier = {sort_canonique}
        if sort_canonique in VARIATIONS_TOLEREES:
            mots_a_verifier.update(VARIATIONS_TOLEREES[sort_canonique])
            
        if any(mot in tentatives_reconnues for mot in mots_a_verifier):
             # Cette condition couvre "accio", "nox", etc., et leurs variantes phon√©tiques.
             print("‚úÖ **Sortil√®ge reconnu !**")
             print(f"‚ú® Le sort est : **{sort_canonique.upper()}**")
             return
        
        # 2.2. V√©rification des SORTS MULTI-MOTS (plus tol√©rants pour les longs sorts)
        mots_du_sort = sort_canonique.split()
        if nb_mots_attendus > 1:
            # V√©rifie si tous les mots du sort sont pr√©sents (Ex: Wingardium ET Leviosa)
            if all(mot in tentatives_reconnues for mot in mots_du_sort):
                print("‚úÖ **Sortil√®ge reconnu (Tous les mots trouv√©s) !**")
                print(f"‚ú® Le sort est : **{sort_canonique.upper()}**")
                return

    # Conclusion si aucun sort n'a √©t√© trouv√©
    print("‚ùå Sortil√®ge non reconnu. R√©essayez !")


# --- Boucle principale ---
if __name__ == "__main__":
    while True:
        ecouter_et_reconnaitre_sort()
        time.sleep(1) 
        print("-" * 30)